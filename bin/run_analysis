#!/usr/bin/env bash

# This script is the entrypoint for all invocations of `cellranger
# count`. It pulls the fastqs and reference transcriptome from s3
# before invoking `cellranger count`.

set -euo pipefail

if [[ "${DEBUG-false}" == "true" ]]; then
  set -x
fi

# SCRATCH_DIR is a 1TB volume.
SCRATCH_DIR="$HOME/scratch"
FASTQS_DIR="$SCRATCH_DIR/fastqs"
OUTPUT_DIR="$SCRATCH_DIR/output"
TRANSCRIPTOME_DIR="$SCRATCH_DIR/transcriptome"
S3_BUCKET="s3://10x-data-backup"

LIBRARIES_CSV_PATH="${SCRATCH_DIR}/libraries.csv"
FEATURE_REF_CSV_PATH="${SCRATCH_DIR}/feature_reference.csv"


usage() {
  echo "$0 CONFIG_JSON"
}

get_from_reference_transcriptome(){
  local key
  key="$1"
  python -c "import json; import sys;
print(json.load(sys.stdin)['sample']['reference_transcriptome']['${key}'])"
}

get_from_sample() {
  local key
  key="$1"
  python -c "import json; import sys;
print(json.load(sys.stdin)['sample']['${key}'])"
}

get_from_config() {
  local key
  key="$1"
  python -c "import json; import sys;
value=json.load(sys.stdin)['${key}']
if type(value) == list:
   print(*value)
else:
   print(value)"
}

get_citeseq_sample_names() {
  python -c "import json; import sys; 
sample_names = [sample['name'] for sample in json.load(sys.stdin)['sample']['feature_barcoding']['samples']]
print(*sample_names)"
}

fetch_fastqs() {
  local config_json experiment_name sample_name runs citeseq_sample_names
  config_json="$1"
  experiment_name="$(get_from_config experiment_name <<<"$config_json")"
  sample_name="$(get_from_sample name <<<"$config_json")"
  runs="$(get_from_config runs <<<"$config_json")"
  
  for run in $runs; do
    aws s3 cp \
        "${S3_BUCKET}/${experiment_name}/${sample_name}/fastqs/run${run}/" \
        "$FASTQS_DIR/${run}/" \
        --include "*_R[1,2]_*.tar.gz" \
        --recursive
  done

  if feature_barcoding_enabled "$config_json"; then
    for citeseq_sample_name in $(get_citeseq_sample_names <<<"$config_json"); do
      for run in $runs; do
        aws s3 cp \
            "${S3_BUCKET}/${experiment_name}/${citeseq_sample_name}/fastqs/run${run}/" \
            "$FASTQS_DIR/${run}/" \
            --include "*_R[1,2]_*.tar.gz" \
            --recursive
      done
    done
  fi

  ls -la $FASTQS_DIR # TODO: Remove; for debugging only
}

fetch_transcriptome() {
  local config_json version name
  config_json="$1"
  version="$(get_from_reference_transcriptome version <<<"$config_json")"
  name="$(get_from_reference_transcriptome name <<<"$config_json")"

  mkdir -p "$TRANSCRIPTOME_DIR"

  aws s3 cp \
      "s3://10x-pipeline/reference_transcriptome/${name}/refdata-cellranger-${name}-${version}.tar.gz" \
      - \
    | tar -C "$TRANSCRIPTOME_DIR" --strip-components=1 -xvzf -
}

feature_barcoding_enabled() {
  local config_json enabled
  config_json="$1"
  enabled="$(echo "$config_json" | python -c "import json; import sys; 
print(json.load(sys.stdin)['sample']['feature_barcoding']['enabled'])")"

  [[ "$enabled" == "True" ]]
}

cellranger_analyze() {
  local config_json sample_name chemistry target_cell_count job_type experiment_name
  config_json="$1"
  sample_name="$(get_from_sample name <<<"$config_json")"
  job_type="$(get_from_sample job_type <<<"$config_json")"
  experiment_name="$(get_from_config experiment_name <<<"$config_json")"

  mkdir -p "$OUTPUT_DIR"

  if [[ "$job_type" == "count" ]] && ! feature_barcoding_enabled "$config_json"; then
    chemistry="$(get_from_sample chemistry <<<"$config_json")"
    target_cell_count="$(get_from_sample target_cell_count <<<"$config_json")"

    pushd "$OUTPUT_DIR"; \
      cellranger count \
                 --disable-ui \
                 --chemistry="$chemistry" \
                 --fastqs="$(echo "${FASTQS_DIR}"/* | tr ' ' ,)" \
                 --id="$sample_name" \
                 --sample="$sample_name" \
                 --expect-cells="$target_cell_count" \
                 --transcriptome="$TRANSCRIPTOME_DIR"
    popd
  fi

  if [[ "$job_type" == "count" ]] && feature_barcoding_enabled "$config_json"; then
    chemistry="$(get_from_sample chemistry <<<"$config_json")"
    target_cell_count="$(get_from_sample target_cell_count <<<"$config_json")"
    generate_libraries_csv "$config_json" > "$LIBRARIES_CSV_PATH"
    aws s3 cp "$LIBRARIES_CSV_PATH" "${S3_BUCKET}/${experiment_name}/samplesheets/${sample_name}_libraries.csv"

    generate_feature_ref_csv "$config_json" > "$FEATURE_REF_CSV_PATH"
    aws s3 cp "$FEATURE_REF_CSV_PATH" "${S3_BUCKET}/${experiment_name}/samplesheets/${sample_name}_feature_reference.csv"

    pushd "$OUTPUT_DIR"; \
      cellranger count \
                 --disable-ui \
                 --chemistry="$chemistry" \
                 --id="$sample_name" \
                 --expect-cells="$target_cell_count" \
                 --transcriptome="$TRANSCRIPTOME_DIR" \
                 --libraries="$LIBRARIES_CSV_PATH" \
                 --feature-ref="$FEATURE_REF_CSV_PATH"

    popd
  fi

  if [[ "$job_type" == "vdj" ]]; then
    pushd "$OUTPUT_DIR"; \
      cellranger vdj \
                 --disable-ui \
                 --fastqs="$(echo "${FASTQS_DIR}"/* | tr ' ' ,)" \
                 --id="$sample_name" \
                 --sample="$sample_name" \
                 --reference="$TRANSCRIPTOME_DIR"
    popd
  fi
}

upload_results() {
  local config_json experiment_name sample_id reference_transcriptome_name
  config_json="$1"
  experiment_name="$(get_from_config experiment_name <<<"$config_json")"
  sample_id="$(get_from_sample name <<<"$config_json")"
  reference_transcriptome_name="$(get_from_reference_transcriptome name <<<"$config_json")"

  aws s3 cp \
      "${OUTPUT_DIR}/${sample_id}" \
      "${S3_BUCKET}/${experiment_name}/${sample_id}/cellranger_analyze_output/${reference_transcriptome_name}"/ \
      --exclude "SC_RNA_COUNTER_CS/*" \
      --recursive
}

main() {
  local config_json

  if [[ -z "${1:-}" ]]; then
    usage
    exit 1
  fi

  config_json="$1"

  fetch_fastqs "$config_json"
  fetch_transcriptome "$config_json"
  cellranger_analyze "$config_json"
  upload_results "$config_json"
}

main "$@"
