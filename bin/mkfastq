#!/usr/bin/env bash

# This script is the entrypoint for all invocations of `cellranger
# mkfastq`. It pulls the raw data from s3 and generates
# samplesheet.csv before invoking `cellranger mkfastq`.

set -euo pipefail

if [[ "${DEBUG-false}" == "true" ]]; then
  set -x
fi

COMPRESSED_RAW_DATA_PATH="/tmp/raw_data.tar.gz"
LOCALMEM=124 # TODO: don't hardcode
LOCALCORES=15 # TODO: don't hardcode
OUTPUT_DIR="${HOME}/output"
RAW_DATA_DIR="${HOME}/raw_data"
SAMPLESHEET_CSV_PATH="${HOME}/samplesheet.csv"

usage() {
  echo "$0 CONFIG_JSON"
}

get_from_config() {
  local key config_json
  key="$1"
  config_json="$2"
  python -c "import json; import sys;
print(json.load(sys.stdin)['${key}'])" <<<"$config_json"
}

fetch_raw_data() {
  local config_json experiment_name bcl_filename
  config_json="$1"
  experiment_name="$(get_from_config experiment_name "$config_json")"
  bcl_file="$(get_from_config bcl_file "$config_json")"
  aws s3 cp "s3://10x-data-backup/${experiment_name}/raw_data/${bcl_file}" "$COMPRESSED_RAW_DATA_PATH"
  mkdir -p "$RAW_DATA_DIR"
  tar -xvz -C "$RAW_DATA_DIR" --strip 1 -f "$COMPRESSED_RAW_DATA_PATH"
  rm "$COMPRESSED_RAW_DATA_PATH"
}

cellranger_mkfastq() {
  exec cellranger mkfastq \
       --delete-undetermined \
       # TOOD: find out if we really need to pass these when running
       # in a container
       #
       # --localcores="${LOCALCORES}" \
       # --localmem="${LOCALMEM}" \
       --output-dir="${OUTPUT_DIR}" \
       --run="${RAW_DATA_DIR}" \
       --samplesheet="${SAMPLESHEET_CSV_PATH}"
}

main() {
  local config_json

  if [[ -z "${1:-}" ]]; then
    usage
    exit 1
  fi

  config_json="$1"

  fetch_raw_data "$config_json"
  generate_samplesheet "$config_json" > "$SAMPLESHEET_CSV_PATH"
  cellranger_mkfastq "$config_json"
}

main "$@"
