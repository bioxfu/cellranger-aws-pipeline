#!/usr/bin/env python

# This script generates the contents of the feature_reference.csv that will
# be consumed by `cellranger count` if we are utilizing feature barcoding.

# The samplesheet generated looks something like this:
# id,name,read,pattern,sequence,feature_type
# adt_5B7-H4,adt_5B7-H4,R2,5PNNNNNNNNNN(BC),TGTATGTCTGCCTTG,Custom
# adt_5CD11a,adt_5CD11a,R2,5PNNNNNNNNNN(BC),TATATCCTTGTGAGC,Custom
# adt_5CD11b,adt_5CD11b,R2,5PNNNNNNNNNN(BC),GACAAGTGATCTGCA,Custom

import csv
import json
import os
import sys
import boto3

FEATURE_REF_CSV_HEADERS = [["id", "name", "read", "pattern", "sequence", "feature_type"]]

def usage():
  print(f'{sys.argv[0]} CONFIG_JSON FEATURE_REF_CSV_PATH')

def get_target_oligo_bc_sequence(oligos, bc_seqs, target_oligo):
  oligo_index = oligos.index(target_oligo)
  bc_sequence = bc_seqs[oligo_index]

  return bc_sequence

def main(config_json):
  config = json.loads(config_json)

  s3 = boto3.client('s3')
  s3.download_file('10x-pipeline', 'oligo_sequences/adt_hto_bc_sequences.csv', 'adt_hto_bc_sequences.csv')
  with open('adt_hto_bc_sequences.csv') as csvfile:
    rows = csv.reader(csvfile)
    res = list(zip(*rows))
  oligos = list(res[0][1:])
  bc_seqs = list(res[1][1:])

  sample = config['sample']
  feature_type = sample['feature_barcoding']['feature_type']
  directionality = sample['feature_barcoding']['directionality']

  target_oligo_group = config['oligo_group']
  target_oligos = target_oligo_group['oligos']
  total_seq_b_c = target_oligo_group['total_seq_b_c']

  if total_seq_b_c:
    pattern = '5PNNNNNNNNNN(BC)'
  elif directionality == '3p':
    pattern = '5P(BC)'
  else:
    pattern = '(BC)3P'

  csv_data = []
  for oligo in target_oligos:
    bc_seq = get_target_oligo_bc_sequence(oligos, bc_seqs, oligo)
    if not oligo.upper().startswith('HTO'):
      oligo = f'adt_{oligo}'

    oligo_data = [oligo, oligo, 'R2', pattern, bc_seq, feature_type]
    csv_data.append(oligo_data)

  writer = csv.writer(sys.stdout)
  writer.writerows(FEATURE_REF_CSV_HEADERS)
  writer.writerows(csv_data)

if len(sys.argv) < 1:
  usage
  exit(1)
else:
  main(sys.argv[1])
